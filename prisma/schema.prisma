// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String    @id @db.Char(26)
  name              String    @db.VarChar(40)
  email             String    @db.VarChar(60)
  password          String    @db.Char(64)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime
  lastAccess        DateTime?
  messagingApiToken String?   @db.VarChar(200)

  groups           Group[]
  contacts         Contact[]
  templatesMessage TemplateMessage[]
  notifications    Notification[]
}

model Group {
  id        String   @id @db.Char(26)
  name      String   @db.VarChar(30)
  color     String   @db.Char(7)
  createdAt DateTime @default(now())
  updatedAt DateTime

  accountId String         @db.Char(26)
  account   Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  contacts  ContactGroup[]
}

model Contact {
  id        String   @id @db.Char(26)
  name      String   @db.VarChar(40)
  email     String?  @db.VarChar(60)
  phone     String?  @db.VarChar(11)
  createdAt DateTime @default(now())
  updatedAt DateTime

  accountId     String                @db.Char(26)
  account       Account               @relation(fields: [accountId], references: [id], onDelete: Cascade)
  groups        ContactGroup[]
  metadata      ContactMetadata[]
  triggers      NotificationTrigger[]
  notifications Notification[]
}

model ContactGroup {
  contactId String @db.Char(26)
  groupId   String @db.Char(26)

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id(fields: [contactId, groupId])
}

model ContactMetadata {
  contactId String   @db.Char(26)
  name      String   @db.VarChar(20)
  value     String   @db.VarChar(200)
  createdAt DateTime @default(now())
  updatedAt DateTime

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id(fields: [contactId, name])
}

model TemplateMessage {
  id               String @id @db.Char(26)
  accountId        String @db.Char(26)
  name             String @db.VarChar(100)
  content          String @db.VarChar(2000)
  params           String @db.VarChar(5000)
  notifyDaysBefore Int?

  account  Account               @relation(fields: [accountId], references: [id], onDelete: Cascade)
  triggers NotificationTrigger[]
}

model NotificationTrigger {
  id                String      @id @db.Char(26)
  contactId         String      @db.Char(26)
  type              TriggerType
  day               Int?
  month             Int?
  templateMessageId String?     @db.Char(26)
  paramsValue       String      @db.VarChar(5000)

  contact         Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)
  templateMessage TemplateMessage? @relation(fields: [templateMessageId], references: [id], onDelete: Cascade)
  notifications   Notification[]
}

enum TriggerType {
  Daily
  Monthy
  Yearly
}

model Notification {
  id          String    @id @db.Char(26)
  accountId   String    @db.Char(26)
  triggerId   String?   @db.Char(26)
  contactId   String?   @db.Char(26)
  scheduledAt DateTime
  sendedAt    DateTime?
  createdAt   DateTime?
  canceledAt  DateTime?
  content     String    @db.VarChar(2000)
  notes       String?   @db.VarChar(100)

  account Account              @relation(fields: [accountId], references: [id], onDelete: Cascade)
  trigger NotificationTrigger? @relation(fields: [triggerId], references: [id], onDelete: SetNull)
  contact Contact?             @relation(fields: [contactId], references: [id], onDelete: Cascade)
}
